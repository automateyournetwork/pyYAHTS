{%- if command == "acl" %}
Hello! pie A T S has learned the following access control list information.
{%- for list in data_to_template['acls'] %}{%- if data_to_template['acls'][list].aces is defined %}{%- for ace in data_to_template['acls'][list].aces %}{%- if data_to_template['acls'][list].aces[ace].matches.l3 is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l3.ipv4 is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l3.ipv4.source_network is defined %}{%- for source_network in data_to_template['acls'][list].aces[ace].matches.l3.ipv4.source_network %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The source network is {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.source_network[source_network] | replace("{'source_network': ","") | replace("}","") | replace("'","") }} and the destination network is {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.destination_network | replace(" {'destination_network':","") | replace("}","") | replace("{","") | replace("'","") | replace(":","") | default("N/A") }} using protocol: {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.protocol | default("N/A") }}
{%- endfor %}{%- else %}{%- for destination_network in data_to_template['acls'][list].aces[ace].matches.l3.ipv4.destination_network %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The destination network is {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.destination_network | replace(" {'destination_network':","") | replace("}","") | replace("{","") | replace("'","") | replace(":","") | default("N/A") }} using protocol: {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.protocol | default("N/A") }}.
{%- endfor %}{%- endif %}{%- endif %}{%- endif %}{%- endfor %}{%- else %}
The access control list {{ list }} has no access control entries.
{%- endif %}{%- endfor %}{%- for list in data_to_template['acls'] %}{%- if data_to_template['acls'][list].aces is defined %}{%- for ace in data_to_template['acls'][list].aces %}{%- if data_to_template['acls'][list].aces[ace].matches.l4 is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.udp is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port is defined %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The source protocol is U D P {%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port.operator is defined %}using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port.operator.port }}.{%- endif %}
{%- else %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port is defined%}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The destination protocol is U D P {%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port.operator is defined %}using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port.operator.port }}.
{%- endif %}
{%- endif %}{%- endif %}{%- else %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port is defined %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The source protocol is T C P {%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port.operator is defined %} using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port.operator.port }}.{% else %}
{%- endif %}
{%- else %}
{%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port is defined%}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The destination protocol is T C P {%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port.operator is defined %} using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port.operator.port }}.{%- endif %}
{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endfor %}{%- else %}
The access control list {{ list }} has no access control entries.
{%- endif %}{%- endfor %}
{%- else %}
{%- if command == "arp" %}
Hello! pie A T S has learned the following address resolution protocol information.
The device {{ hostname }} has the following address resolution protocol statistics:
Total Entries: {{ data_to_template['statistics'].entries_total }}.
Input drops: {{ data_to_template['statistics'].in_drops }}.
Input reply packets: {{ data_to_template['statistics'].in_replies_pkts }}.
Input request packets: {{ data_to_template['statistics'].in_requests_pkts }}.
Total input: {{ data_to_template['statistics'].in_total | default("N/A") }}.
Incomplete total: {{ data_to_template['statistics'].incomplete_total }}.
Output drops: {{ data_to_template['statistics'].out_drops | default("N/A") }}.
Output gratuitious packets: {{ data_to_template['statistics'].out_gratuitous_pkts | default("N/A") }}.
Output reply packets: {{ data_to_template['statistics'].out_replies_pkts }}.
Output request packets: {{ data_to_template['statistics'].out_requests_pkts }}.
Total output packets: {{ data_to_template['statistics'].out_total| default("N/A") }}.
Per interface information:
{%- for interface in data_to_template['interfaces'] %}
{%-     if data_to_template['interfaces'][interface].ipv4 is defined %}
{%-         for neighbor in data_to_template['interfaces'][interface].ipv4.neighbors %}
The interface {{ interface }} has the neighboring IP address {{ neighbor }} with a MAC address of {{ data_to_template['interfaces'][interface].ipv4.neighbors[neighbor].link_layer_address }} originating from {{ data_to_template['interfaces'][interface].ipv4.neighbors[neighbor].origin }}.
Address resolution protocol dynamic learning local proxy is enabled? {{ data_to_template['interfaces'][interface].arp_dynamic_learning.local_proxy_enable }}.
Address resolution protocol dynamic learning proxy is enabled? {{ data_to_template['interfaces'][interface].arp_dynamic_learning.proxy_enable }}.
{%-        endfor %}
{%-     endif %}
{%- endfor %}
{%- else %}
{%- if command == "bgp" %}
Hello! pie A T S has learned the following border gateway protocol information.
{%-             for instance in data_to_template['instance'] %}
{%-                 for vrf in data_to_template['instance'][instance].vrf %}
{%-                     for neighbor in data_to_template['instance'][instance].vrf[vrf].neighbor %}
Instance {{ instance }} has an ID of {{ data_to_template['instance'][instance].bgp_id }} and is in the {{ data_to_template['instance'][instance].protocol_state }} state.
The virtual route forwarder {{ vrf }} has a router ID of {{ data_to_template['instance'][instance].vrf[vrf].router_id }}, a cluster ID of {{ data_to_template['instance'][instance].vrf[vrf].cluster_id }} and a confederation ID of {{ data_to_template['instance'][instance].vrf[vrf].confederation_identifier }}.
The following neighbor {{ neighbor }} was detected using version {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].bgp_version }}. 
The holdtime is {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].holdtime }} with a keep alive interval of {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].keepalive_interval }}.
The local autonomous system number is {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].local_as_as_no }} and the remote autonomous system number is {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].remote_as }}.
{%-                 if data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].bgp_neighbor_counters is defined %}    
We have received {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].bgp_neighbor_counters.messages.received.total }} messages and sent {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].bgp_neighbor_counters.messages.sent.total }} messages.
{%                  endif %}
The last reset was at {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].bgp_session_transport.connection.last_reset }} with the following reason {{ data_to_template['instance'][instance].vrf[vrf].neighbor[neighbor].bgp_session_transport.connection.reset_reason }}.
{%-                     endfor %}
{%-                 endfor %}
{%-             endfor %}
{%- else %}
{%- if command == 'dot1x' %}
Hello! pie A T S has learned the following 8 0 2 dot 1 x information.
The device {{ hostname }} 8 0 2 dot 1 x summary information:
Auth Control is set to {{ data_to_template.system_auth_control }}.
There are {{ data_to_template.sessions.authorized_clients }} authorized clients and {{ data_to_template.sessions.unauthorized_clients }} unauthorized clients and {{ data_to_template.sessions.total }} total sessions.
The details for 8 0 2 dot 1 x per interface:
{%- for interface in data_to_template.interfaces %}{%- if data_to_template.interfaces[interface].clients is defined %}{%- for client in data_to_template.interfaces[interface].clients %}{%- for session in data_to_template.interfaces[interface].clients[client].session %}
The interface {{ interface }} has the following client {{ client }} using E A P method is {{ data_to_template.interfaces[interface].clients[client].eap_method }} with a port access entity of {{ data_to_template.interfaces[interface].clients[client].pae }}.
The client status is {{ data_to_template.interfaces[interface].clients[client].status }}. 
The client session is {{ session }}.
The auth bend S M state is {{ data_to_template.interfaces[interface].clients[client].session[session].auth_bend_sm_state }} and the auth S M state is {{ data_to_template.interfaces[interface].clients[client].session[session].auth_sm_state }}.
The maximum re-auth requests are {{ data_to_template.interfaces[interface].max_reauth_req }} and maximum requests are {{ data_to_template.interfaces[interface].max_req }}.
The last R X source MAC address was {{ data_to_template.interfaces[interface].statistics.lastrxsrcmac }}.
The interface statitics are as follows:
R X invalid {{ data_to_template.interfaces[interface].statistics.rxinvalid }}.
R X length error {{ data_to_template.interfaces[interface].statistics.rxlenerr }}.
R X logoff {{ data_to_template.interfaces[interface].statistics.rxlogoff }}.
R X response {{ data_to_template.interfaces[interface].statistics.rxresp }}.
R X state is {{ data_to_template.interfaces[interface].statistics.rxstart }}.
With a total RX of {{ data_to_template.interfaces[interface].statistics.rxtotal }}.
T X requests {{ data_to_template.interfaces[interface].statistics.txreq }}.
The T X request I D is {{ data_to_template.interfaces[interface].statistics.txreqid }}.
With a total T X of {{ data_to_template.interfaces[interface].statistics.txtotal }}.
The T X period is {{ data_to_template.interfaces[interface].timeout.tx_period }} with a quiet period of {{ data_to_template.interfaces[interface].timeout.quiet_period }} and server timeout of {{ data_to_template.interfaces[interface].timeout.server_timeout }} and supplicant timeout of {{ data_to_template.interfaces[interface].timeout.supp_timeout }}.
{%- endfor %}{%- endfor %}{%- else %}
The interface {{ interface }} has the following client {{ client }} using E A P method is {{ data_to_template.interfaces[interface].clients[client].eap_method }} with a port access entity of {{ data_to_template.interfaces[interface].clients[client].pae }}.
The interface has no 8 0 2 dot 1 x clients and no sessions
The maximum re-auth requests are {{ data_to_template.interfaces[interface].max_reauth_req }} and maximum requests are {{ data_to_template.interfaces[interface].max_req }}.
The last R X source MAC address was {{ data_to_template.interfaces[interface].statistics.lastrxsrcmac }}.
The interface statitics are as follows:
R X invalid {{ data_to_template.interfaces[interface].statistics.rxinvalid }}.
R X length error {{ data_to_template.interfaces[interface].statistics.rxlenerr }}.
R X logoff {{ data_to_template.interfaces[interface].statistics.rxlogoff }}.
R X response {{ data_to_template.interfaces[interface].statistics.rxresp }}.
R X state is {{ data_to_template.interfaces[interface].statistics.rxstart }}.
With a total RX of {{ data_to_template.interfaces[interface].statistics.rxtotal }}.
T X requests {{ data_to_template.interfaces[interface].statistics.txreq }}.
The T X request I D is {{ data_to_template.interfaces[interface].statistics.txreqid }}.
With a total T X of {{ data_to_template.interfaces[interface].statistics.txtotal }}.
The T X period is {{ data_to_template.interfaces[interface].timeout.tx_period }} with a quiet period of {{ data_to_template.interfaces[interface].timeout.quiet_period }} and server timeout of {{ data_to_template.interfaces[interface].timeout.server_timeout }} and supplicant timeout of {{ data_to_template.interfaces[interface].timeout.supp_timeout }}.
{% endif %}{% endfor %}
{%- else %}
{%- if command == "hsrp" %}
Hello! pie A T S has learned the following hot standby redundancy protocol information.
{%-             for vlan in data_to_template %}
{%-                 for address_family in data_to_template[vlan].address_family %}
{%-                     for version in data_to_template[vlan].address_family[address_family].version %}
{%-                         for group in data_to_template[vlan].address_family[address_family].version[version].groups %}
The vee LAN {{ vlan }} using address family {{ address_family }} and version {{ version }} is part of group {{ group }}.
The active router is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].active_router }}.
The H S R P router state is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].hsrp_router_state }}.
The primary I P v 4 address is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].primary_ipv4_address.address }}.
Virtual I P learn is set to {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].primary_ipv4_address.virtual_ip_learn }}.
The priority is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].priority }}.
The current session name is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].session_name }}.
The standby I P address is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].standby_ip_address }} and the standby router is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].standby_router }}.
The hello timer is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].timers.hello_sec }} and the hold timer is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].timers.hold_sec }}.
The virtual MAC address is {{ data_to_template[vlan].address_family[address_family].version[version].groups[group].virtual_mac_address }} and sse burned in address is set to {{ data_to_template[vlan].use_bia }}.
{%-                         endfor %}
{%-                     endfor %}
{%-                 endfor %}
{%-             endfor %}
{%- else %}
{%- if command == 'interface' %}
Hello! pie A T S has learned the following interface information.
{%- for interface in data_to_template %}
The interface {{ interface }}, with the description {{ data_to_template[interface].description }}, has the following settings and status:
The interface is enabled? {{ data_to_template[interface].enabled }}. 
The operational status is {{ data_to_template[interface].oper_status }}.
{%-                  if data_to_template[interface].access_vlan is defined %}
The access vee LAN is {{ data_to_template[interface].access_vlan }}.
{%-                  endif %}
{%-                  if data_to_template[interface].native_vlan is defined %}
The native vee LAN is {{ data_to_template[interface].native_vlan }}.
{%-                  endif %}
{%-                  if data_to_template[interface].switchport_enable is defined %}
Switchport enable is {{ data_to_template[interface].switchport_enable }}.
{%-                  endif %}
{%-                  if data_to_template[interface].switchport_mode is defined %}
The switchport mode is {{ data_to_template[interface].switchport_mode }}.
{%-                  endif %}
{%-                  if data_to_template[interface].type is defined %}
The type is {{ data_to_template[interface].type }}.
{%-                  endif %}
{%-                  if data_to_template[interface].bandwidth is defined %}
The bandwidth is {{ data_to_template[interface].bandwidth }}.
{%-                  endif %}
{%-                  if data_to_template[interface].auto_negotiate is defined %}
Auto negotiate is set to {{ data_to_template[interface].auto_negotiate }}.
{%-                  endif %}
{%-                  if data_to_template[interface].port_speed is defined %}
The port speed is {{ data_to_template[interface].port_speed }}.
{%-                  endif %}
{%-                  if data_to_template[interface].duplex_mode is defined %}
The duplex mode is {{ data_to_template[interface].duplex_mode }}.
{%-                  endif %}
{%-                  if data_to_template[interface].mtu is defined %}
The M T U is {{ data_to_template[interface].mtu }}.
{%-                  endif %}
{%-                  if data_to_template[interface].mac_address is defined %}
The MAC address is {{ data_to_template[interface].mac_address }}{%- endif %}{%- if data_to_template[interface].phys_address is defined %} with a physical address of {{ data_to_template[interface].phys_address }}{%- endif %}
{%-                  if data_to_template[interface].ipv4 is defined %}
{%-                      for ip_address in data_to_template[interface].ipv4 %}
The I P address is {{ ip_address }}.
{%-                      endfor %}
{%-                  endif %}
{%-                  if data_to_template[interface].medium is defined %}
The medium is {{ data_to_template[interface].medium }}.
{%-                  endif %}
{%-                  if data_to_template[interface].delay is defined %}
The delay is {{ data_to_template[interface].delay }}.
{%-                  endif %}
{%-                  if data_to_template[interface].encapsulation is defined %}
The encapsulation is {{ data_to_template[interface].encapsulation.encapsulation }}.
{%-                  endif %}
{%-                  if data_to_template[interface].flow_control is defined %}
Flow control receive is {{ data_to_template[interface].flow_control.receive }} and flow control send is {{ data_to_template[interface].flow_control.send }}.
{%-                  endif %}
{%-                  if data_to_template[interface].port_channel is defined %}
{%                       if data_to_template[interface].port_channel.port_channel_int is defined %}
The port channel interface is {{ data_to_template[interface].port_channel.port_channel_int }}.
{%                       endif %}
{%                       if data_to_template[interface].port_channel.port_channel_member_intfs is defined %}
{%-                          for member in data_to_template[interface].port_channel.port_channel_member_intfs %}
The port channel has the following members {{ member }}.
{%-                          endfor %}
{%                       else %}
{%-                          if data_to_template[interface].port_channel.port_channel_member is defined %}
This interface is a port channel member {{ data_to_template[interface].port_channel.port_channel_member }}.
{%-                          endif %}
{%-                      endif %}
{%-                  endif %}
{%-                  if data_to_template[interface].last_change is defined %}
The interface changed last at {{ data_to_template[interface].last_change }}.
{%-                  endif %}
{%-                  if data_to_template[interface].counters is defined %}
Here are the interface input counters:
{%-                      if data_to_template[interface].counters.in_broadcast_pkts is defined %}
Input broadcast packets {{ data_to_template[interface].counters.in_broadcast_pkts }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_crc_errors is defined %}
Input C R C errors {{ data_to_template[interface].counters.in_crc_errors }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_errors is defined %}
Input errors {{ data_to_template[interface].counters.in_errors }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_mac_pause_frames is defined %}
Input MAC pause frames {{ data_to_template[interface].counters.in_mac_pause_frames }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_multicast_pkts is defined %}
Input multicast packets {{ data_to_template[interface].counters.in_multicast_pkts }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_octets is defined %}
Input octects {{ data_to_template[interface].counters.in_octets }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_unicast_pkts is defined %}
Input unicast packets {{ data_to_template[interface].counters.in_unicast_pkts }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_unknown_protos is defined %}
Input unknown protocols {{ data_to_template[interface].counters.in_unknown_protos }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.in_pkts is defined %}
Total input packets {{ data_to_template[interface].counters.in_pkts }}.
{%-                      endif %}
Here are the interface output counters:
{%-                      if data_to_template[interface].counters.out_broadcast_pkts is defined %}
Output broadcast packets {{ data_to_template[interface].counters.out_broadcast_pkts }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.out_discard is defined %}
Output discards {{ data_to_template[interface].counters.out_discard }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.out_errors is defined %}
Output errors {{ data_to_template[interface].counters.out_errors }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.out_mac_pause_frames is defined %}
Output MAC pause frames {{ data_to_template[interface].counters.out_mac_pause_frames }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.out_multicast_pkts is defined %}
Output multicast packets {{ data_to_template[interface].counters.out_multicast_pkts }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.out_unicast_pkts is defined %}
Output unicast packets {{ data_to_template[interface].counters.out_unicast_pkts }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.out_pkts is defined %}
Total output packets {{ data_to_template[interface].counters.out_pkts }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.last_clear is defined %}
The counters were last cleared at {{ data_to_template[interface].counters.last_clear }}.
{%-                      endif %}
{%-                      if data_to_template[interface].counters.rate is defined %}
The input rate is {{ data_to_template[interface].counters.rate.in_rate }} packets.
The output rate is {{ data_to_template[interface].counters.rate.out_rate }} packets.
The load interval is {{ data_to_template[interface].counters.rate.load_interval }}
{%-                      endif %}
{%-                  endif %}
{%- endfor %}
{%- else %}
{%- if command == "lldp" %}
Hello! pie A T S has learned the following link layer discovery protocol information.
The device {{ hostname }} has the following L L D P details:
LLDP is enabled? {{ data_to_template.enabled }}.
The hello timer is {{ data_to_template.hello_timer }} and the hold timer is {{ data_to_template.hold_timer }}.
The following number of entries have aged out {{ data_to_template.counters.entries_aged_out }}.
{{ data_to_template.counters.frame_discard }} frames have been discarded with {{ data_to_template.counters.frame_error_in }} frame input errors.
There have been {{ data_to_template.counters.frame_in }} frames input and {{ data_to_template.counters.frame_out }} frames output.
There have been {{ data_to_template.counters.tlv_discard }} T L Vee discards and {{ data_to_template.counters.tlv_unknown }} unknown T L Vees.
Per interface LLDP information: 
{%- for interface in data_to_template['interfaces'] %}{%- if data_to_template['interfaces'][interface].port_id is defined %}{%- for port in data_to_template['interfaces'][interface].port_id %}{%- for neighbor in data_to_template['interfaces'][interface].port_id[port].neighbors %}{%- for capability in data_to_template['interfaces'][interface].port_id[port].neighbors[neighbor].capabilities %}
The interface {{ interface }} is enabled? {{ data_to_template['interfaces'][interface].enabled }} with a neighbor of {{ neighbor }} on port {{ port }} with a description of {{ data_to_template['interfaces'][interface].port_id[port].neighbors[neighbor].port_description }}.
The neighbor capabilities are {{ capability }} with a chassis ID of {{ data_to_template['interfaces'][interface].port_id[port].neighbors[neighbor].chassis_id }}, management address of {{ data_to_template['interfaces'][interface].port_id[port].neighbors[neighbor].management_address }} and system description of {{ data_to_template['interfaces'][interface].port_id[port].neighbors[neighbor].system_description | replace("\n"," ") }}.
{%- endfor %}{%- endfor %}{%- endfor %}{%- else %}
Interface {{ interface }} is enabled? {{ data_to_template['interfaces'][interface].enabled }} but has no neighbors.
{%- endif %}{%- endfor %}
{%- else %}
{%- if command == "ntp" %}
Hello! pie A T S has learned the following network time protocol information.
The device {{ hostname }} has the following NTP information
The associations address is {{ data_to_template['clock_state'].system_status.associations_address }} with an associations local mode of {{ data_to_template['clock_state'].system_status.associations_local_mode }}.
The clock offset is {{ data_to_template['clock_state'].system_status.clock_offset }}, precision is {{ data_to_template['clock_state'].system_status.clock_precision }}, reference ID is {{ data_to_template['clock_state'].system_status.clock_refid }}, state is {{ data_to_template['clock_state'].system_status.clock_state }} and stratum  of {{ data_to_template['clock_state'].system_status.clock_stratum }}.
The reference time is {{ data_to_template['clock_state'].system_status.reference_time }} with a root delay of {{ data_to_template['clock_state'].system_status.root_delay }} and root dispersion of {{ data_to_template['clock_state'].system_status.root_dispersion }}.
{%- for vrf in data_to_template['vrf'] %}{%- for address in data_to_template['vrf'][vrf].associations.address %}{%- for is_conf,value in data_to_template['vrf'][vrf].associations.address[address].local_mode.client.isconfigured.items() %}
Is N T P configured? {{ value.isconfigured }}.
The V R F is {{ vrf }} with an address of {{ address }}.
The delay is {{ value.delay }} with a local mode of {{ value.local_mode }}, offset of {{ value.offset }}, poll of {{ value.poll }}, and reach of {{ value.reach }}.
The received time is {{ value.receive_time }} with a reference ID of {{ value.refid }} and stratum of {{ value.stratum }}.
{%- endfor %}{%- endfor %}{%- endfor %}
{%- for vrf in data_to_template['vrf'] %}{%- for address in data_to_template['vrf'][vrf].unicast_configuration.address %}
The V R F is {{ vrf }} with an address of {{ address }} with a preferred server : {{ data_to_template['vrf'][vrf].unicast_configuration.address[address].type.server.preferred }} and server type of {{ data_to_template['vrf'][vrf].unicast_configuration.address[address].type.server.type }}.
{%- endfor %}{%- endfor %}
{%- else %}
{%- if command == "ospf" %}
Hello! pie A T S has learned the following open shortest path first protocol information.
{%- for vrf in data_to_template['vrf'] %}{%- if vrf == "default" %}{%- for address_family in data_to_template['vrf'][vrf].address_family %}{%- for instance in data_to_template['vrf'][vrf].address_family[address_family].instance %}{%- for graceful_restart in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].graceful_restart %}{%- for area in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas %}{%- for lsa_type in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types %}{%- for lsa in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas %}{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router is defined %}{%- for link in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links %}{%- for topology in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].topologies %}{%- for interface in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces %}{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors is defined %}{%- for neighbor in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors %}
The V R F {{ vrf }} using address family {{ address_family }} has an instance number {{ instance }} with router ID {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].router_id }}.
Is auto cost enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].auto_cost.enable }}.
Is B F D enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].bfd.enable }}.
Graceful Restart {{ graceful_restart }} is enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].graceful_restart[graceful_restart].enable }}.
Is M P L S L D P auto config enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].mpls.ldp.autoconfig }}.
Is N S R enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].nsr.enable }}.
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].preference is defined %}
The preference single value all is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].preference.single_value.all }}.
{%- endif %}
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.paths is defined %}
S P F has {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.paths }} control paths.
{%- endif %}
S P F start is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.start }}, hold is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.hold }} and maximum is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.maximum }}.
The area is {{ area }} and is a {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].area_type }}.
S P F has run {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].statistics.spf_runs_count }} times.
Is M P L S T E enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].mpls.te.enable }}.
The link state advertisement type is {{ lsa_type }}.
The advertising router is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].adv_router }}.
The link state advertisement ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].lsa_id }}.
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.num_of_links }} links.
The link is {{ link }} with a link ID of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].link_id }} and link data of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].link_data }} and link type {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].type }}.
The topology number is {{ topology }} with a metric of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].topologies[topology].metric }}
The header age is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.age }}, checksum of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.checksum }}, length of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.length }}, with options {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.option }}.
The sequence number is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.seq_num }}.
The Interface {{ interface }} has O S P F enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].enable }}. And has B F D enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].bfd.enable }}.
The interface cost is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].cost }}.
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive is defined %}
The interface is passive? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive }}
{%- endif %}
The interface state is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].state }}.
The interface type is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].interface_type }}.
The interface hello timer is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_timer| default ("N/A") }}, hello interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_interval| default ("N/A") }}, dead interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dead_interval| default ("N/A") }} and retransmit interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].retransmit_interval| default ("N/A") }}.
The interface D R IP address is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_ip_addr| default ("N/A") }} and D R router ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_router_id| default ("N/A") }}.
The interface priority is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].priority| default ("N/A") }}.
The interface transmit delay is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].transmit_delay| default ("N/A") }}.
The neighbor {{ neighbor }} has an address of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].address }}, B D R IP address of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].bdr_ip_addr }}, D R IP address : {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].dr_ip_addr }}, router ID of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].neighbor_router_id }}, dead timer of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].dead_timer }} and has the state of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].state }}
There have been {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].statistics.nbr_event_count }} neighbor events.
The retransmit queue length is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].statistics.nbr_retrans_qlen }}
{%- endfor %}{%- else %}
The V R F {{ vrf }} using address family {{ address_family }} has an instance number {{ instance }} with router ID {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].router_id }}.
Is auto cost enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].auto_cost.enable }}.
Is B F D enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].bfd.enable }}.
Graceful Restart {{ graceful_restart }} is enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].graceful_restart[graceful_restart].enable }}.
Is M P L S L D P auto config enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].mpls.ldp.autoconfig }}.
Is N S R enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].nsr.enable }}.
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].preference is defined %}
The preference single value all is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].preference.single_value.all }}.
{%- endif %}
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.paths is defined %}
S P F has {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.paths }} control paths.
{%- endif %}
S P F start is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.start }}, hold is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.hold }} and maximum is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.maximum }}.
The area is {{ area }} and is a {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].area_type }}.
S P F has run {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].statistics.spf_runs_count }} times.
Is M P L S T E enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].mpls.te.enable }}.
The link state advertisement type is {{ lsa_type }}.
The advertising router is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].adv_router }}.
The link state advertisement ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].lsa_id }}.
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.num_of_links }} links.
The link is {{ link }} with a link ID of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].link_id }} and link data of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].link_data }} and link type {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].type }}.
The topology number is {{ topology }} with a metric of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].topologies[topology].metric }}
The header age is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.age }}, checksum of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.checksum }}, length of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.length }}, with options {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.option }}.
The sequence number is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.seq_num }}.
The Interface {{ interface }} has O S P F enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].enable }}. And has B F D enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].bfd.enable }}.
The interface cost is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].cost }}.
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive is defined %}
The interface is passive? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive }}
{%- endif %}
The interface state is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].state }}.
The interface type is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].interface_type }}.
The interface hello timer is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_timer| default ("N/A") }}, hello interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_interval| default ("N/A") }}, dead interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dead_interval| default ("N/A") }} and retransmit interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].retransmit_interval| default ("N/A") }}.
The interface D R IP address is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_ip_addr| default ("N/A") }} and D R router ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_router_id| default ("N/A") }}.
The interface priority is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].priority| default ("N/A") }}.
The interface transmit delay is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].transmit_delay| default ("N/A") }}.
There are no neighbors
{%- endif %}{%- endfor %}{%- endfor %}{%- endfor %}{%- else %}{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.summary is defined %}{% for topology in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.summary.topologies %}
The V R F {{ vrf }} using address family {{ address_family }} has an instance number {{ instance }} with router ID {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].router_id }}.
Is auto cost enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].auto_cost.enable }}.
Is B F D enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].bfd.enable }}.
Graceful Restart {{ graceful_restart }} is enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].graceful_restart[graceful_restart].enable }}.
Is M P L S L D P auto config enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].mpls.ldp.autoconfig }}.
Is N S R enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].nsr.enable }}.
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].preference is defined %}
The preference single value all is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].preference.single_value.all }}.
{%- endif %}
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.paths is defined %}
S P F has {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.paths }} control paths.
{%- endif %}
S P F start is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.start }}, hold is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.hold }} and maximum is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].spf_control.throttle.spf.maximum }}.
The area is {{ area }} and is a {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].area_type }}.
S P F has run {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].statistics.spf_runs_count }} times.
Is M P L S T E enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].mpls.te.enable }}.
The link state advertisement type is {{ lsa_type }}.
The advertising router is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].adv_router }}.
The link state advertisement ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].lsa_id }}.
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.num_of_links }} links.
The link is {{ link }} with a link ID of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].link_id }} and link data of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].link_data }} and link type {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].type }}.
The topology number is {{ topology }} with a metric of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.body.router.links[link].topologies[topology].metric }}
The header age is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.age }}, checksum of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.checksum }}, length of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.length }}, with options {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.option }}.
The sequence number is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.seq_num }}.
There are no interfaces participating in OSPF and there are no neighbors.
{%- endfor %}{%- endif %}{%- endif %}{%- endfor %}{%- endfor %}{%- endfor %}{%- endfor %}{%- endfor %}{%- endfor %}{%- else %}{%- for address_family in data_to_template['vrf'][vrf].address_family %}{% for instance in data_to_template['vrf'][vrf].address_family[address_family].instance %}{% for area in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas %}{% for interface in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces %}{% if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors is defined %}{% for neighbor in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors %}
The V R F {{ vrf }} using address family {{ address_family }} has an instance number {{ instance }}
The area is {{ area }}.
Is M P L S L D P auto config enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].mpls.ldp.autoconfig }}.
The Interface {{ interface }} has O S P F enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].enable }}. And has B F D enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].bfd.enable }}.
The interface cost is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].cost }}.
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive is defined %}
The interface is passive? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive }}
{%- endif %}
The interface state is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].state }}.
The interface type is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].interface_type }}.
The interface hello timer is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_timer| default ("N/A") }}, hello interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_interval| default ("N/A") }}, dead interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dead_interval| default ("N/A") }} and retransmit interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].retransmit_interval| default ("N/A") }}.
The interface D R IP address is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_ip_addr| default ("N/A") }} and D R router ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_router_id| default ("N/A") }}.
The interface priority is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].priority| default ("N/A") }}.
The interface transmit delay is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].transmit_delay| default ("N/A") }}.
The neighbor {{ neighbor }} has an address of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].address }}, B D R IP address of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].bdr_ip_addr }}, D R IP address : {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].dr_ip_addr }}, router ID of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].neighbor_router_id }}, dead timer of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].dead_timer }} and has the state of {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].state }}
There have been {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].statistics.nbr_event_count }} neighbor events.
The retransmit queue length is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].statistics.nbr_retrans_qlen }}
{%- endfor %}{%- else %}
The V R F {{ vrf }} using address family {{ address_family }} has an instance number {{ instance }}
The area is {{ area }}.
Is M P L S L D P auto config enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].mpls.ldp.autoconfig }}.
The Interface {{ interface }} has O S P F enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].enable }}. And has B F D enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].bfd.enable }}.
The interface cost is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].cost }}.
{%- if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive is defined %}
The interface is passive? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive }}
{%- endif %}
The interface state is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].state }}.
The interface type is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].interface_type }}.
The interface hello timer is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_timer| default ("N/A") }}, hello interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_interval| default ("N/A") }}, dead interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dead_interval| default ("N/A") }} and retransmit interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].retransmit_interval| default ("N/A") }}.
The interface D R IP address is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_ip_addr| default ("N/A") }} and D R router ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dr_router_id| default ("N/A") }}.
The interface priority is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].priority| default ("N/A") }}.
The interface transmit delay is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].transmit_delay| default ("N/A") }}.
{%- endif %}{%- endfor %}{%- endfor %}{%- endfor %}{%- endfor %}{%- endif %}{%- endfor %}
{%- else %}
{%- if command == "platform" %}
Hello! pie A T S has learned the following platform information.
The device {{ hostname }} is a {{ data_to_template.chassis }} chassis with serial number {{ data_to_template.chassis_sn }} and is a {{ data_to_template.rtr_type }} router.
The config register is set to {{ data_to_template.config_register }}. 
The directory is {{ data_to_template.dir }}.
The system image is {{ data_to_template.image }}.
The I S SU Rollback Timer Reason is {{ data_to_template.issu_rollback_timer_reason }} with an I S S U rollback timer state of {{ data_to_template.issu_rollback_timer_state }}.
The main memory is {{ data_to_template.main_mem | int // 1024 }} megabytes.
The operating system is {{ data_to_template.os }}.
The redundancy communication is {{ data_to_template.redundancy_communication }} and redundancy mode is {{ data_to_template.redundancy_mode }} and a switchover reason of {{ data_to_template.switchover_reason }}.
The R P uptime is {{ data_to_template.rp_uptime }}.
The version is {{ data_to_template.version }}.
{%- else %}
{%- if command == "routing" %}
Hello! pie A T S has learned the following routing information.
{%- for vrf in data_to_template['vrf'] %}
{%-     for address_family in data_to_template['vrf'][vrf].address_family %}
{%-         for route in data_to_template['vrf'][vrf].address_family[address_family].routes %}
{%-             if data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.next_hop_list is defined %}
{%-                 for next_hop in data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.next_hop_list %}
The virtual route forwarder {{ vrf }} using address family {{ address_family }} has the following route {{ route }} that is active {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].active }} with a metric of {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].metric }}.
The next hop number {{ next_hop }} has a next hop of {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.next_hop_list[next_hop].next_hop }} with a route preference of {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].route_preference }}. 
The source protocol is {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].source_protocol }} with the codes {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].source_protocol_codes }}
{%-                 endfor %}
{%-             else %}
{%-                 for outgoing_interface in data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.outgoing_interface %}
The virtual route forwarder {{ vrf }} using address family {{ address_family }} has the following route {{ route }} using the outgoing interface : {{ outgoing_interface }}.
The source protocol is {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].source_protocol }} with the codes {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].source_protocol_codes }}
{%-                 endfor %}
{%-             endif %}
{%-         endfor %}
{%-     endfor %}
{%- endfor %}
{%- else %}
{%- if command == 'stp' %}
Hello! pie A T S has learned the following spanning tree protocol information.
The hostname {{ hostname }} spanning tree protocol summary:
Is B P D U filter enabled? {{ data_to_template['global'].bpdu_filter }}.
Is B P D U guard enabled? {{ data_to_template['global'].bpdu_guard }}.
The B P D U guard timeout recovery is {{ data_to_template['global'].bpduguard_timeout_recovery }}.
Is ether channel misconfigure guard enabled? {{ data_to_template['global'].etherchannel_misconfig_guard }}.
Is loop guard enabled? {{ data_to_template['global'].loop_guard }}.
{%- for id in data_to_template['rapid_pvst'] %}{%- for vlan in data_to_template['rapid_pvst'][id].vlans %}{%- for interface in data_to_template['rapid_pvst'][id].vlans[vlan].interfaces %}
The following rapid per Vee LAN spanning tree plus information has been parsed:
Vee LAN {{ vlan }}.
The forwarding delay is {{ data_to_template['rapid_pvst'][id].forwarding_delay }}, hello time is {{ data_to_template['rapid_pvst'][id].hello_time }}, hold count is {{ data_to_template['rapid_pvst'][id].hold_count }} and max age is {{ data_to_template['rapid_pvst'][id].max_age }}.
The bridge address for this Vee LAN is {{ data_to_template['rapid_pvst'][id].vlans[vlan].bridge_address }} with a bridge priority of {{ data_to_template['rapid_pvst'][id].vlans[vlan].bridge_priority }}.
The configured bridge priority is {{ data_to_template['rapid_pvst'][id].vlans[vlan].configured_bridge_priority }}.
The designated root address is {{ data_to_template['rapid_pvst'][id].vlans[vlan].designated_root_address }} and the designated root priority is {{ data_to_template['rapid_pvst'][id].vlans[vlan].designated_root_priority }}.
The Vee LAN forwarding delay is {{ data_to_template['rapid_pvst'][id].vlans[vlan].forwarding_delay }}, Vee LAN hello time is {{ data_to_template['rapid_pvst'][id].vlans[vlan].hello_time }}, Vee LAN hold count is {{ data_to_template['rapid_pvst'][id].vlans[vlan].hold_count }}, Vee LAN hold time is {{ data_to_template['rapid_pvst'][id].vlans[vlan].hold_time }} and Vee LAN max age is {{ data_to_template['rapid_pvst'][id].vlans[vlan].max_age }}.
The time since the last topology change is {{ data_to_template['rapid_pvst'][id].vlans[vlan].time_since_topology_change }}.
There have been {{ data_to_template['rapid_pvst'][id].vlans[vlan].topology_changes }} topology changes.
The interface {{ interface }} has a cost of {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].cost | default("N/A") }}.
{%- if data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].counters is defined %}
The interface has received {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].counters.bpdu_received }} B P D Us and sent {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].counters.bpdu_sent }} B P D Us.
{%- endif %}
The interface designated bridge address is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].designated_bridge_address | default("N/A") }}  and designated bridge priority is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].designated_bridge_priority | default("N/A") }}.
The interface designated cost is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].designated_cost | default("N/A") }}.
The interface designated port number is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].designated_port_num }} and designated port priority is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].designated_port_priority }}.
The interface designated root address is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].designated_root_address | default("N/A") }} and designated root priority is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].designated_root_priority | default("N/A") }}.
There have been {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].forward_transitions | default("N/A") }} interface forward transitions.
The port state is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].port_state }} and role is {{ data_to_template['rapid_pvst'][id].vlans[vlan].interfaces[interface].role }}.
{%- endfor %}{%- endfor %}{%- endfor %}  
{%-     for domain in data_to_template['mstp'] %}  
The following multiple spanning tree information has been parsed:
The domain is {{ domain }} named {{ data_to_template['mstp'][domain].name | default("Not named") }} with a revision of {{ data_to_template['mstp'][domain].revision }}.
{%-     endfor %}
{%- else %}
{%- if command == "vlan" %}
{%- for vlan in data_to_template['vlans'] if (vlan != "configuration") or (vlan != "interface_vlan_enabled") or (vlan != "vn_segment_vlan_based_enabled")  %}
Hello! pie A T S has learned the following virtual local area network information.
The Vee LAN {{ vlan }} named {{ data_to_template['vlans'][vlan].name }} is {{ data_to_template['vlans'][vlan].state }}. 
Is the Vee LAN shutdown? {{ data_to_template['vlans'][vlan].shutdown }}.
{%- if data_to_template['vlans'][vlan].interfaces is defined %}
The following interfaces are on this VLAN
{%- for interface in data_to_template['vlans'][vlan].interfaces %}
 {{ interface }}
{%- endfor %}{%- else %}
The Vee LAN {{ vlan }} named {{ data_to_template['vlans'][vlan].name }} is {{ data_to_template['vlans'][vlan].state }}. 
Is the Vee LAN shutdown? {{ data_to_template['vlans'][vlan].shutdown }}.
{%- endif %}{%- endfor %}
{%- else %}
{%- if command == 'vrf' %}
Hello! pie A T S has learned the following virtual route forwarder information.
{%- for vrf in data_to_template['vrfs'] %}
{%-     for address_family in data_to_template['vrfs'][vrf].address_family %}
{%-         if data_to_template['vrfs'][vrf].address_family[address_family].route_targets is defined %}
{%-             for target in data_to_template['vrfs'][vrf].address_family[address_family].route_targets %}
The virtual route forwarder {{ vrf }} with a description of {{ data_to_template['vrfs'][vrf].description | default("No Description") }} and address family {{ address_family }} has the following target {{ target | default("No Target") }}.
The router type is {{ data_to_template['vrfs'][vrf].address_family[address_family].route_targets[target].rt_type }} and route distinguisher is {{ data_to_template['vrfs'][vrf].route_distinguisher }}
{%-             endfor %}
{%-         else %}
The virtual route forwarder {{ vrf }} with a description of {{ data_to_template['vrfs'][vrf].description | default("No Description") }} and address family {{ address_family }} has a route distinguisher of {{ data_to_template['vrfs'][vrf].route_distinguisher }}
{%-         endif %}
{%-     endfor %}
{%- endfor %}
{%- else %}
{%- if command == "show access-lists" %}
Hello! pie A T S has parsed the following show access-lists information.
{%- for list in data_to_template['acls'] %}{%- if data_to_template['acls'][list].aces is defined %}{%- for ace in data_to_template['acls'][list].aces %}{%- if data_to_template['acls'][list].aces[ace].matches.l3 is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l3.ipv4 is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l3.ipv4.source_network is defined %}{%- for source_network in data_to_template['acls'][list].aces[ace].matches.l3.ipv4.source_network %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The source network is {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.source_network[source_network] | replace("{'source_network': ","") | replace("}","") | replace("'","") }} and the destination network is {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.destination_network | replace(" {'destination_network':","") | replace("}","") | replace("{","") | replace("'","") | replace(":","") | default("N/A") }} using protocol: {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.protocol | default("N/A") }}
{%- endfor %}{%- else %}{%- for destination_network in data_to_template['acls'][list].aces[ace].matches.l3.ipv4.destination_network %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The destination network is {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.destination_network | replace(" {'destination_network':","") | replace("}","") | replace("{","") | replace("'","") | replace(":","") | default("N/A") }} using protocol: {{ data_to_template['acls'][list].aces[ace].matches.l3.ipv4.protocol | default("N/A") }}.
{%- endfor %}{%- endif %}{%- endif %}{%- endif %}{%- endfor %}{%- else %}
The access control list {{ list }} has no access control entries.
{%- endif %}{%- endfor %}{%- for list in data_to_template['acls'] %}{%- if data_to_template['acls'][list].aces is defined %}{%- for ace in data_to_template['acls'][list].aces %}{%- if data_to_template['acls'][list].aces[ace].matches.l4 is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.udp is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port is defined %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The source protocol is U D P {%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port.operator is defined %}using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.source_port.operator.port }}.{%- endif %}
{%- else %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port is defined%}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The destination protocol is U D P {%- if data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port.operator is defined %}using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.udp.destination_port.operator.port }}.
{%- endif %}
{%- endif %}{%- endif %}{%- else %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp is defined %}{%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port is defined %}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The source protocol is T C P {%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port.operator is defined %} using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.source_port.operator.port }}.{% else %}
{%- endif %}
{%- else %}
{%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port is defined%}
The access control list {{ list }} has an access control entry {{ ace }} that is forwarding {{ data_to_template['acls'][list].aces[ace].actions.forwarding }}. 
Logging is set to {{ data_to_template['acls'][list].aces[ace].actions.logging | default ("No Logging") }}.
The destination protocol is T C P {%- if data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port.operator is defined %} using operator {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port.operator.operator }} for port {{ data_to_template['acls'][list].aces[ace].matches.l4.tcp.destination_port.operator.port }}.{%- endif %}
{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endfor %}{%- else %}
The access control list {{ list }} has no access control entries.
{%- endif %}{%- endfor %}
{%- else %}
{%- if command == "show bgp process vrf all" %}
Hello! pie A T S has parsed the following show b g p process v r f all information.
{%-     for vrf in data_to_template.vrf %}
{%-         for address_family in data_to_template.vrf[vrf].address_family %}
{%-             for peer in data_to_template.vrf[vrf].address_family[address_family].peers %}
The {{ hostname }} has the B G P tag {{ data_to_template.bgp_tag }}, router ID {{ data_to_template.vrf[vrf].router_id }}, P I D {{ data_to_template.bgp_pid }}, and is in the following state {{ data_to_template.bgp_protocol_state }}.
The started reason is {{ data_to_template.bgp_protocol_started_reason }}. 
There are {{ data_to_template.bgp_as_path_entries }} A S path entries using the A S format {{ data_to_template.bgp_asformat }}.
The memory state is {{ data_to_template.bgp_memory_state }}. 
M Mode is set to {{ data_to_template.bgp_mmode }}.
There are {{ data_to_template.bgp_paths_per_hwm_attr }} paths per H W M attribute.
There are {{ data_to_template.bytes_used }} bytes used.
There are {{ data_to_template.entries_pending_delete }} entries pending deletion.
The virtual route forwarder is {{ vrf }}. 
The cluster ID is {{ data_to_template.vrf[vrf].cluster_id }}.
The confederation router ID is {{ data_to_template.vrf[vrf].conf_router_id }}.
The number of configured peers is {{ data_to_template.vrf[vrf].num_conf_peers }} and the number of established peers is {{ data_to_template.vrf[vrf].num_established_peers }} with {{ data_to_template.vrf[vrf].num_pending_conf_peers }} pending configured peers.
The V R F ID is {{ data_to_template.vrf[vrf].vrf_id }} and V R F R D is {{ data_to_template.vrf[vrf].vrf_rd }}.
The V R F state is {{ data_to_template.vrf[vrf].vrf_state }}.
The address family is {{ address_family }}.
The peer is {{ peer }}.
There are {{ data_to_template.vrf[vrf].address_family[address_family].peers[peer].active_peers }} active peers.
There are {{ data_to_template.vrf[vrf].address_family[address_family].peers[peer].aggregates }} aggregates.
There are {{ data_to_template.vrf[vrf].address_family[address_family].peers[peer].networks }} networks.
There are {{ data_to_template.vrf[vrf].address_family[address_family].peers[peer].paths }} paths.
There are {{ data_to_template.vrf[vrf].address_family[address_family].peers[peer].routes }} routes.
The table ID is {{ data_to_template.vrf[vrf].address_family[address_family].table_id }} and table state is {{ data_to_template.vrf[vrf].address_family[address_family].table_state }}.
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show bgp sessions" %}
Hello! pie A T S has parsed the following show b g p sessions information.
{%-     for vrf in data_to_template.vrf %}
class {{ data_to_template.local_as }}_Local_AS {
Total Established Peers : {{ data_to_template.total_established_peers }}
Total Peers : {{ data_to_template.total_peers }}
VRF : {{ vrf }}
Router ID : {{ data_to_template.vrf[vrf].router_id }}
VRF Established Peers : {{ data_to_template.vrf[vrf].vrf_established_peers }}
VRF Peers : {{ data_to_template.vrf[vrf].vrf_peers }}
{%-     endfor %}
{%- else %}
{%- if command == "show cdp neighbors" %}
Hello! pie A T S has parsed the following show c d p neighbors information.
{%-     for neighbor in data_to_template['cdp'].index %}
The device {{ hostname }}'s local interface {{ data_to_template['cdp'].index[neighbor].local_interface }} is connected to device {{ data_to_template['cdp'].index[neighbor].device_id }}, which is a {{ data_to_template['cdp'].index[neighbor].platform }}, with capabilities {{ data_to_template['cdp'].index[neighbor].capability }} on {{ data_to_template['cdp'].index[neighbor].port_id }} with a hold time of {{ data_to_template['cdp'].index[neighbor].hold_time }}.
{%-     endfor %}
{%- else %}
{%- if command == "show cdp neighbors detail" %}
Hello! pie A T S has parsed the following show c d p neighbors detail information.
{%-             for neighbor in data_to_template['index'] %}
The device {{ hostname }}'s local interface : {{ data_to_template['index'][neighbor].local_interface }} is connected to device {{ data_to_template['index'][neighbor].device_id }}, which is a {{ data_to_template['index'][neighbor].platform }}, with capabilities {{ data_to_template['index'][neighbor].capabilities }}, and software version {{ data_to_template['index'][neighbor].software_version | replace(","," ") | replace("\n"," ") }}, on port {{ data_to_template['index'][neighbor].port_id }} with a hold time of {{ data_to_template['index'][neighbor].hold_time }}. The native Vee LAN is {{ data_to_template['index'][neighbor].native_vlan | default("not set") }} and duplex mode is {{ data_to_template['index'][neighbor].duplex_mode }}.
The remote device has the following IP addresses: 
{%-                 for ip_address in data_to_template['index'][neighbor].entry_addresses %}
{{ ip_address }}
{%-                 endfor %}
{%-             endfor %}
{%- else %}
{%- if command == 'show environment' %}
Hello! pie A T S has parsed the following show environment information.
{%-     for switch in data_to_template['switch'] %}
The device {{ switch }} has a System Temperature State of {{ data_to_template['switch'][switch].system_temperature_state }}.
The Inlet Temperature State is {{ data_to_template['switch'][switch].inlet_temperature.state }} with a value of {{ data_to_template['switch'][switch].inlet_temperature.value }}.
The Thresholds are as follows:
Yellow: {{ data_to_template['switch'][switch].inlet_temperature.yellow_threshold }}
Red: {{ data_to_template['switch'][switch].inlet_temperature.red_threshold }}
The Hostspot Temperature State is {{ data_to_template['switch'][switch].hotspot_temperature.state }} with a value of {{ data_to_template['switch'][switch].hotspot_temperature.value }}.
The Hotspot Thresholds are as follows:
Yellow: {{ data_to_template['switch'][switch].hotspot_temperature.yellow_threshold }}
Red: {{ data_to_template['switch'][switch].hotspot_temperature.red_threshold }}
Power Supply
{%-         for power_supply in data_to_template['switch'][switch].power_supply %}
The power supply {{ power_supply }} has a P ID {{ data_to_template['switch'][switch].power_supply[power_supply].pid | default("N/A") }}.
The PoE Power is {{ data_to_template['switch'][switch].power_supply[power_supply].poe_power | default("N/A") }}.
The Serial Number is {{ data_to_template['switch'][switch].power_supply[power_supply].serial_number | default("N/A") }}.
The State is {{ data_to_template['switch'][switch].power_supply[power_supply].state }} and status is {{ data_to_template['switch'][switch].power_supply[power_supply].status }}.
The System Power is {{ data_to_template['switch'][switch].power_supply[power_supply].system_power | default("N/A") }} using {{ data_to_template['switch'][switch].power_supply[power_supply].watts | default("N/A") }} watts.
{%-         endfor %}
{%-         for fan in data_to_template['switch'][switch].fan %}
The Fan {{ fan }} State is {{ data_to_template['switch'][switch].fan[fan].state }}.
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show etherchannel summary" %}
Hello! pie A T S has parsed the following Show Etherchannel Summary information.
{%-     for interface in data_to_template['interfaces'] %}
The interface {{ interface }} Bundle ID is {{ data_to_template['interfaces'][interface].bundle_id }} named {{ data_to_template['interfaces'][interface].name }} with an Operational Status of {{ data_to_template['interfaces'][interface].oper_status }}.
The Protocol is {{ data_to_template['interfaces'][interface].protocol | default("Mode On") }}.
The Flags are {{ data_to_template['interfaces'][interface].flags }}
The Members are 
{%-         for member in data_to_template['interfaces'][interface].members %}
Interface {{ data_to_template['interfaces'][interface].members[member].interface }}.
Bundled {{ data_to_template['interfaces'][interface].members[member].bundled }} with flags {{ data_to_template['interfaces'][interface].members[member].flags }}.
 {%-        endfor %}
{%-     endfor %}
The Number of Aggregators is {{ data_to_template.number_of_aggregators }} and the Number of LAG in Use is {{ data_to_template.number_of_lag_in_use }}.
{%- else %}
{%- if command == "show interfaces" %}
Hello! pie A T S has parsed the following Show Interfaces command
{%-     for interface in data_to_template %}
The interface {{ interface }} has a description {{ data_to_template[interface].description | default ("No Description") }}.
The Type is {{ data_to_template[interface].type }}.
The interface is {{ data_to_template[interface].connected | default ("Not Connected") | replace(","," ") }}.
The interface is  {{ data_to_template[interface].enabled | default ("Not Enabled" ) | replace(","," ")}}.
The Bandwidth is {{ data_to_template[interface].bandwidth }}.
The Port Speed is {{ data_to_template[interface].port_speed | default ("N/A")}}.
The Duplex Mode is {{ data_to_template[interface].duplex_mode | default ("N/A") }}.
The Line Protocol is {{ data_to_template[interface].line_protocol }}.
The Operational Status is {{ data_to_template[interface].oper_status }}.
The MAC Address is {{ data_to_template[interface].mac_address }}.
The Media Type is {{ data_to_template[interface].media_type | default ("N/A")}}.
The Delay is {{ data_to_template[interface].delay }}.
The Encapsulation is {{ data_to_template[interface].encapsulations.encapsulation }}.
The Keepalive is {{ data_to_template[interface].keepalive | default ("N/A")}}.
The M T U is {{ data_to_template[interface].mtu }}.
Is the interface a Port Channel Member? {{ data_to_template[interface].port_channel.port_channel_member }}.
{%-         if data_to_template[interface].port_channel.port_channel_member_intfs is defined %}
The  Port Channel Members are
{%-             for member_interface in data_to_template[interface].port_channel.port_channel_member_intfs %}
 {{ member_interface }}
{%-             endfor %}
{%          endif %}
The interface has the following IP Addresses
{%-         if data_to_template[interface].ipv4 is defined %}
{%-             for ip_address in data_to_template[interface].ipv4 %}
 {{ ip_address }}
{%-             endfor %}
{%-         endif %}
{%-         if data_to_template[interface].counters is defined %}
The interface input Counters are:
CRC Errors: {{ data_to_template[interface].counters.in_crc_errors }}
Errors: {{ data_to_template[interface].counters.in_errors }}
Packets: {{ data_to_template[interface].counters.in_pkts }}
The interface Output counters are:
Errors: {{ data_to_template[interface].counters.out_errors }}
Packets: {{ data_to_template[interface].counters.out_pkts }}
{%-         endif %}
{%-         if data_to_template[interface].queues is defined %}
The interface Queue Strategy: {{ data_to_template[interface].queues.queue_strategy }}
There are {{ data_to_template[interface].queues.input_queue_drops }} input drops and {{ data_to_template[interface].queues.total_output_drop }} output drops.
{%-         endif %}
{%-     endfor %}
{%- else %}
{%- if command == "show interfaces status" %}
Hello! pie A T S has parsed the following Show Interfaces Status information:
{%- for interface in data_to_template['interfaces'] %}  
The interface {{ interface }} name is {{ data_to_template['interfaces'][interface].name | default("Not Named") }} with a status of {{ data_to_template['interfaces'][interface].status }}.
The Port Speed is {{ data_to_template['interfaces'][interface].port_speed }} and duplex code is {{ data_to_template['interfaces'][interface].duplex_code }}.
The interface is on V LAN {{ data_to_template['interfaces'][interface].vlan }}.
{%- endfor %}
{%- else %}
{%- if command == "show interfaces trunk" %}
Hello! pie A T S has parsed the following Show Interfaces Trunk information.
{%-     for interface in data_to_template['interface'] %}
Interface {{ interface }} 
Encapsulation is {{ data_to_template['interface'][interface].encapsulation }} and Mode is {{ data_to_template['interface'][interface].mode }}.
The Native VLAN is {{ data_to_template['interface'][interface].native_vlan }}.
The interface Status is {{ data_to_template['interface'][interface].status }}.
The following V LANs are Allowed on the Trunk: {{ data_to_template['interface'][interface].vlans_allowed_on_trunk }}.
The following V LANs in S T P Forwarding are Not Pruned: {{ data_to_template['interface'][interface].vlans_in_stp_forwarding_not_pruned }}.
{%-     endfor %}
{%- else %}
{%- if command == "show inventory" %}
Hello! pie A T S has parsed the following Show Inventory information.
{%-     for slot in data_to_template['main'] %}
{%-        for part in data_to_template['main'][slot] %}
Slot {{ slot }} is a {{ part }} with a description {{ data_to_template['main'][slot][part].descr }}.
The part ID is {{ data_to_template['main'][slot][part].pid }} and the virtual ID is {{ data_to_template['main'][slot][part].sn }},{{ data_to_template['main'][slot][part].vid }}
{%-         endfor %}
{%-     endfor %}
{%-     for slot in data_to_template['slot'] %}
{%-         for part in data_to_template['slot'][slot] %}
{%-             for part_number in data_to_template['slot'][slot][part] %}
The slot {{ slot }} is a {{ part_number }} with a Description {{ data_to_template['slot'][slot][part][part_number].descr }}.
The Part ID is {{ data_to_template['slot'][slot][part][part_number].pid }} with Serial Number {{ data_to_template['slot'][slot][part][part_number].sn }} and Virtual ID {{ data_to_template['slot'][slot][part][part_number].vid }}
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == 'show ip arp' %}
Hello! pie A T S has parsed the following Show IP ARP information for the Global Routing Table.
{%-     for interface in data_to_template['interfaces'] %}
{%-         for neighbor in data_to_template['interfaces'][interface].ipv4.neighbors %}
The interface {{ interface }} has a neighbor {{ neighbor }} with a Link Layer Address {{ data_to_template['interfaces'][interface].ipv4.neighbors[neighbor].link_layer_address }} that is type {{ data_to_template['interfaces'][interface].ipv4.neighbors[neighbor].type }} with an origin of {{ data_to_template['interfaces'][interface].ipv4.neighbors[neighbor].origin }}.
The Age of this entry is {{ data_to_template['interfaces'][interface].ipv4.neighbors[neighbor].age }} using protocol {{ data_to_template['interfaces'][interface].ipv4.neighbors[neighbor].protocol }}.
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show ip interface brief" %}
Hello! pie A T S has parsed the following information from the show IP interface brief command.
{%-    for interface in data_to_template['interface'] %}  
The interface {{ interface }} has the following IP address {{ data_to_template['interface'][interface].ip_address }} via {{ data_to_template['interface'][interface].method }}.
The protocol is {{ data_to_template['interface'][interface].protocol }} and the status of the interface is {{ data_to_template['interface'][interface].status }}. 
Is the Interface OK? {{ data_to_template['interface'][interface].interface_is_ok }}.
{%-    endfor %}
{%- else %}
{%- if command == "show ip ospf" %}
Hello! pie A T S has parsed the following Show IP OSPF information.
{%-     for vrf in data_to_template['vrf'] %}
{%-         for address_family in data_to_template['vrf'][vrf].address_family %}
The V R F {{ vrf }} with address family {{ address_family }} has the following instances.
{%-             for instance in data_to_template['vrf'][vrf].address_family[address_family].instance %}
Instance {{ instance }}.
The Router ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].router_id }}.
Is the Area a Transit? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].area_transit }}.
Is the area N S S A? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].nssa }}.
Is it Enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].enable }}.
Is Auto Cost Enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].auto_cost.enable }}.
The Reference Bandwidth is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].auto_cost.reference_bandwidth }}.
Is B F D Enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].bfd.enable }}.
The Elapsed Time is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].elapsed_time }}.
Is L L S? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].lls }}.
Is N S R Enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].nsr.enable }}.
The External L S A is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].numbers.external_lsa }}.
{%-                 if data_to_template['vrf'][vrf].address_family[address_family].instance[instance].event_log is defined %}
Event Log is Enabled.
{%-                 endif %}
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].total_normal_areas }} normal areas.
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].total_nssa_areas }} N S S A areas.
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].total_stub_areas }} stub areas. 
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].total_areas }} total areas.
{%-                 for area in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas %}
The area {{ area }} has the following information.
The Area Scope LSA Count is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].statistics.area_scope_lsa_count }}.
The Area Type is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].area_type }}.
The Area Summary is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].summary }}.
The Interface Count is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].statistics.interfaces_count }}.
S P F Last Executed {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].statistics.spf_last_executed }}. 
There have been {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].statistics.spf_runs_count }} SPF Runs.
{%-                 endfor %}
{%-                 for graceful_restart in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].graceful_restart %}
Is Graceful Restart {{ graceful_restart }} Enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].graceful_restart[graceful_restart].enable }}
{%-                 endfor %}
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show ip ospf database" %}
Hello! pie A T S has parsed the following Show IP OSPF Database information
{%-     for vrf in data_to_template['vrf'] %}
{%-         for address_family in data_to_template['vrf'][vrf].address_family %}
{%-             for instance in data_to_template['vrf'][vrf].address_family[address_family].instance %}
The V R F {{ vrf }} address family {{ address_family }} Instance {{ instance }} has the following areas
{%-                 for area in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas %}
Area {{ area }}
{%-                     for lsa_type in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types %}
LSA Type {{ lsa_type }}
{%-                         for lsa in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas %}
LSA {{ lsa }} Age {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.age }}.
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.link_count }} links.
The Checksum is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.checksum }} and sequence Number is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].database.lsa_types[lsa_type].lsas[lsa].ospfv2.header.seq_num }}.
{%-                         endfor %}
{%-                     endfor %}
{%-                 endfor %}
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show ip ospf interface" %}
Hello! pie A T S has parsed the following Show IP OSPF Interface information.
{%-     for vrf in data_to_template['vrf'] %}
{%-         for address_family in data_to_template['vrf'][vrf].address_family %}
{%-             for instance in data_to_template['vrf'][vrf].address_family[address_family].instance %}
{%-                 for area in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas %}
{%-                     for interface in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces %}
The V R F {{ vrf }} address family {{ address_family }} Instance {{ instance }} Area {{ area }} interface {{ interface }} Name is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].name }}.
The Type is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].interface_type }}.
Is the interface Passive? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].passive }}.
The IP Address is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].ip_address }}.
The Router ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].router_id }}.
Is B F D Enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].bfd.enable }}.
The Cost is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].cost }}.
The Dead Interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].dead_interval }}.
Is the interface Enabled? {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].enable }}.
The Hello Interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_interval }} and Hello Timer is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].hello_timer }}.
The Index is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].index }}.
The Retransmit Interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].retransmit_interval }}.
The State is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].state }}.
There are {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].statistics.nbr_count }} Neighbors on the interface.
The Transmit Delay is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].transmit_delay }} and wait interval is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].wait_interval }}.
{%-                         for graceful_restart in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].graceful_restart %}
Graceful Restart: {{ graceful_restart }} has the Helper {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].graceful_restart[graceful_restart].helper }}.
{%-                         endfor %}
{%-                     endfor %}
{%-                 endfor %}
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show ip ospf neighbor" %}
Hello! pie A T S has parsed the following Show IP OSPF Neighbor information.
{%-     for interface in data_to_template['interfaces'] %}
The interface {{ interface }} has the following neighbors:
{%-         for neighbor in data_to_template['interfaces'][interface].neighbors %}
Neighbor {{ neighbor }} with address {{ data_to_template['interfaces'][interface].neighbors[neighbor].address }}, dead time {{ data_to_template['interfaces'][interface].neighbors[neighbor].dead_time }}, priority {{ data_to_template['interfaces'][interface].neighbors[neighbor].priority }} and state {{ data_to_template['interfaces'][interface].neighbors[neighbor].state }}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show ip ospf neighbor detail" %}
Hello! pie A T S has parsed the following Show IP OSPF Neighbor Detail information.
{%-     for vrf in data_to_template['vrf'] %}
{%-         for address_family in data_to_template['vrf'][vrf].address_family %}
{%-             for instance in data_to_template['vrf'][vrf].address_family[address_family].instance %}
{%-                 for area in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas %}
{%-                     for interface in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces %}
The V R F {{ vrf }} Instance {{ instance }} Area {{ area }} Interface {{ interface }} has neighbors
{%-                         for neighbor in data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors %}
Neighbor {{ neighbor }} with address {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].address }}.
The Router ID is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].neighbor_router_id }}.
The Index is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].index | replace(",","") }} with a Priority {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].priority }}.
The State is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].state }}.
The Dead Timer is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].dead_timer }}.
There have been {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].statistics.total_retransmission }} Total Retransmissions.
The Uptime is {{ data_to_template['vrf'][vrf].address_family[address_family].instance[instance].areas[area].interfaces[interface].neighbors[neighbor].uptime }}.
{%-                         endfor %}
{%-                     endfor %}
{%-                 endfor %}
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show ip route" %}
Hello! pie A T S has parsed the following Show IP Route information.
{%-     for vrf in data_to_template['vrf'] %}
{%-         for address_family in data_to_template['vrf'][vrf].address_family %}
The V R F {{ vrf }} address family {{ address_family }} has the route
{%-             for route in data_to_template['vrf'][vrf].address_family[address_family].routes %}
Route {{ route }}.
Is the route Active? {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].active }}
The Metric is {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].metric }} and preference is {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].route_preference }}.
The Source Protocol is {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].source_protocol }} and Code is {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].source_protocol_codes }}.
The Next Hop number 
{%-                 for next_hop in data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.next_hop_list %}
{{ next_hop }} has a Next Hop {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.next_hop_list[next_hop].next_hop }} with an outgoing interface: {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.next_hop_list[next_hop].outgoing_interface }}.
It was Updated {{ data_to_template['vrf'][vrf].address_family[address_family].routes[route].next_hop.next_hop_list[next_hop].updated }} ago.
{%-                 endfor %}
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == 'show license summary' %}
Hello! pie A T S has parsed the following Show License Summary information.
{%-     for license in data_to_template['license_usage'] %}
The license {{ license }} is Entitled to {{ data_to_template['license_usage'][license].entitlement }}.
There are {{ data_to_template['license_usage'][license].count }} licenses.
The license status is {{ data_to_template['license_usage'][license].status }}
{%-     endfor %}
{%- else %}
{%- if command == "show mac address-table" %}
Hello! pie A T S has parsed the following Show MAC Address Table information
{%-     for vlan in data_to_template['mac_table'].vlans %}
The V LAN {{ vlan }} 
{%-         for mac in data_to_template['mac_table'].vlans[vlan].mac_addresses %}
MAC address {{ mac }}
{%-             for interface in data_to_template['mac_table'].vlans[vlan].mac_addresses[mac].interfaces %}
Interface {{ interface }}
Is a {{ data_to_template['mac_table'].vlans[vlan].mac_addresses[mac].interfaces[interface].entry_type }} Entry Type.
{%-             endfor %}
{%-         endfor %}
{%-     endfor %}
{%- else %}
{%- if command == "show ntp associations" %}
Hello! pie A T S has parsed the following Show NTP Associations information.
{%-     for peer in data_to_template.peer %}
The Peer {{ peer }} has a Reference ID {{ data_to_template['peer'][peer]['local_mode']['client']['refid'] }} and Stratum {{ data_to_template['peer'][peer]['local_mode']['client']['stratum'] }}.
The Poll time is {{ data_to_template['peer'][peer]['local_mode']['client']['poll'] }} with a reach {{ data_to_template['peer'][peer]['local_mode']['client']['reach'] }}, delay {{ data_to_template['peer'][peer]['local_mode']['client']['delay'] }}, offset: {{ data_to_template['peer'][peer]['local_mode']['client']['offset'] }} and jitter: {{ data_to_template['peer'][peer]['local_mode']['client']['jitter'] }}.
{%-     endfor %}
{%- else %}
{%- if command == "show version" %}
Hello! pie A T S has parsed the following information from the {{ command }} command.
The hostname of the device is {{ data_to_template['version'].hostname }}. 
The platform is a {{ data_to_template['version'].platform }}.
The chassis is a {{ data_to_template['version'].chassis }}.
The chassis serial number is {{ data_to_template['version'].chassis_sn }}.
The software version is {{ data_to_template['version'].version }}.
The software image is {{ data_to_template['version'].image_id }}.
The operating system is {{ data_to_template['version'].os }}.
The device has been up for {{ data_to_template['version'].uptime }}.
The device was last reloaded at {{ data_to_template['version'].system_restarted_at }} becase {{ data_to_template['version'].last_reload_reason }}.
The device has {{ data_to_template['version'].number_of_intfs | replace("{","") | replace("}","") }} interfaces.
The device has {{ data_to_template['version'].main_mem | int // 1024 }} megabytes of main memory, {{ data_to_template['version'].mem_size["non-volatile configuration"] | int // 1024 }} megabytes of non-volatile memory and {{ data_to_template['version'].mem_size.physical | int // 1024 }} megabytes of physical memory.
The device license type is {{ data_to_template['version'].license_type }}.
{%- else %}
{%- if command == "show vlan" %}
Hello! pie A T S has parsed the following show vee lan information.
{%-         for vlan in data_to_template['vlans'] %}
The vee vlan {{ vlan }} named {{ data_to_template['vlans'][vlan].name }} is in the following state {{ data_to_template['vlans'][vlan].state }}. 
Is the Vee VLAN shutdown? {{ data_to_template['vlans'][vlan].shutdown }}.The M T U is {{ data_to_template['vlans'][vlan].mtu }}
The Vee VLAN is on the following interfaces:
{%-             for interface in data_to_template['vlans'][vlan].interfaces %}
{{ interface }}
{%-             endfor %}
{%-         endfor %}
{%- else %}
{%- if command == "show vrf" %}
Hello! pie A T S has parsed the following show v r f information.
{%-             for vrf in data_to_template['vrf'] %}
{%-                 for protocol in data_to_template['vrf'][vrf].protocols %}
The virtual route forwarder {{ vrf }} using the {{ protocol }} protocol is present on the following interfaces:
{%-                     for interface in data_to_template['vrf'][vrf].interfaces %}
{%-                         if interface != "ipv4" %}
{{ interface }}
{%-                         endif %}
{%-                     endfor %}
{%-                 endfor %}
{%-             endfor %}
{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}{%- endif %}